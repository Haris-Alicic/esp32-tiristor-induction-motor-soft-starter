#include <Arduino.h>
#include "sensors.hpp"
#include "timer.hpp"

const uint8_t test_pin1 = 26;
const uint8_t test_pin2 = 27;
const uint8_t test_pin3 = 14;

const uint8_t protection_pin = 25;
const uint8_t triac_1_pin = 19;
const uint8_t voltage_amplitude_pin = 35;
const uint8_t voltage_zero_cross_pin = 17;
const uint8_t current_amplitude_pin = 34;
const uint8_t current_zero_cross_pin = 18;
//TIMERS
//We use timer 2 and 3 because they are not used
const uint8_t timer2 = 2;
const uint8_t timer3 = 3;

//VOLATILE VARIABLES
volatile bool voltage_zero_crossing = false;
volatile bool current_zero_crossing = false;

// put function declarations here:
void IRAM_ATTR voltageZeroCrossingInterrupt();
void IRAM_ATTR currentZeroCrossingInterrupt();
void IRAM_ATTR triacInterrupt();
void IRAM_ATTR measurementInterrupt();

//Objects
Sensor Voltage;
Sensor Current;
//CurrentSensor Current;
Timer Timer2;
Timer Timer3;
SoftwareTimer SoftwareTimer1;
SoftwareTimer SoftwareTimer2;

void setup()
{
  Serial.begin(115200);
  Serial.println(getCpuFrequencyMhz());

  esp_err_t setPriorityResult = gpio_set_intr_type((gpio_num_t)2, GPIO_INTR_ANYEDGE);
  if (setPriorityResult != ESP_OK)
  {
    Serial.println("Error setting interrupt priority!");
  }

  Voltage.setup(voltage_amplitude_pin, voltage_zero_cross_pin, voltageZeroCrossingInterrupt);
  Current.setup(current_amplitude_pin, current_zero_cross_pin, currentZeroCrossingInterrupt);
  
  Timer2.setup(timer2, measurementInterrupt, true);
  Timer2.setDelay(1000);
  Timer2.enable();

  Timer3.setup(timer3, triacInterrupt, false);
  Timer3.setDelay(9000);
  Timer3.enable();

  SoftwareTimer1.setup(1000000, true);
  //SoftwareTimer2.setup(1000000, true);
  
  pinMode(test_pin1, OUTPUT);
  pinMode(test_pin2, OUTPUT);
  pinMode(test_pin3, OUTPUT);
  pinMode(protection_pin, OUTPUT);
  pinMode(triac_1_pin, OUTPUT);

  digitalWrite(test_pin1, LOW);
  digitalWrite(test_pin2, LOW);
  digitalWrite(test_pin3, LOW);
  digitalWrite(triac_1_pin, LOW);
  digitalWrite(protection_pin, LOW);

  //Attach interrupt

}

void loop()
{
  if(voltage_zero_crossing)
  {
    Voltage.rmsCalculate();
    voltage_zero_crossing = false;
  }

  if(SoftwareTimer1.periodElapsed())
  {
    Serial.println("RMS_Voltage: " + String(Voltage.rmsValue()));
    Serial.println("RMS_Current: " + String(Current.rmsValue()));
    //Serial.println("Timer2_freq: " + String(timer2_frequency));
  }
  printLoopFrequency();
}

// put function definitions here:
void IRAM_ATTR voltageZeroCrossingInterrupt(void)
{
  voltage_zero_crossing = true;
  digitalWrite(triac_1_pin, LOW);
  //Voltage.rmsMeasure();
  //Timer3.setDelay(9200);
  Timer3.restart();
  Timer3.enable();
}

void IRAM_ATTR currentZeroCrossingInterrupt(void)
{
  current_zero_crossing = true;
}

void IRAM_ATTR measurementInterrupt()
{
  Voltage.sample();
  //Current.rmsSum();
  /*if(SoftwareTimer2.periodElapsed())
  {
    timer2_frequency = timer2_count;
    timer2_count = 0;
  }
  timer2_count++;*/
  //Current.sample();
  //digitalWrite(test_pin1, !digitalRead(test_pin1));
}

void IRAM_ATTR triacInterrupt()
{
  digitalWrite(triac_1_pin, HIGH);
  //digitalWrite(test_pin3, HIGH);
  Timer3.disable();
  //digitalWrite(test_pin2, !digitalRead(test_pin2));
}

***********************************************************************************

#pragma once

#include "Arduino.h"
#include <queue>

typedef void (*type_sensor_interrupt_function_pointer)();

//Enums
enum Polarity{POSITIVE, NEGATIVE};

//Classes
class Sensor
{
  private:
  u_int8_t _amplitude_pin = 0;
  u_int8_t _zero_crossing_pin = 0;
  type_sensor_interrupt_function_pointer _p_sensor_interrupt_function = NULL;
  volatile bool _zero_crossing = false;
  Polarity _polarity;

  volatile uint16_t _sample = 0;
  std::queue<uint16_t> _sample_queue;
  volatile uint16_t _number_of_samples = 0;

  volatile uint32_t _rms_sample = 0;
  volatile uint64_t _rms_sum = 0;
  volatile double _rms_average = 0;
  volatile double _rms_value = 0;

  public:
  void setup(uint8_t amplitude_pin, uint8_t zero_crossing_pin, type_sensor_interrupt_function_pointer p_sensor_interrupt_function)
  {
    _amplitude_pin = amplitude_pin;
    _zero_crossing_pin = zero_crossing_pin;
    _p_sensor_interrupt_function = p_sensor_interrupt_function;

    pinMode(_amplitude_pin, INPUT);
    pinMode(_zero_crossing_pin, INPUT);
    attachInterrupt(digitalPinToInterrupt(_zero_crossing_pin), _p_sensor_interrupt_function, CHANGE);
  }

  void measurePolarity(void)
  {
    if(digitalRead(_zero_crossing_pin)) _polarity = POSITIVE;
    else _polarity = NEGATIVE;
  }

  void sample(void)
  {
    _sample_queue.push(analogRead(_amplitude_pin));
  }

  void rmsCalculate()
  {
    _number_of_samples = _sample_queue.size();
    _rms_sum = 0.0;
    uint16_t sample;
    while(!_sample_queue.empty())
    {
      sample = _sample_queue.front();
      _rms_sum += sample * sample;
      _sample_queue.pop();
    }
    _rms_value = sqrt((double)_rms_sum / (double)_number_of_samples);
  }

  double rmsValue()
  {
    return _rms_value;
  }
};

*********************************************************************************

#pragma once
#include <Arduino.h>

typedef void (*type_timer_interrupt_function_pointer)();

class Timer
{
    private:
    hw_timer_t * _p_timer = NULL;
    uint32_t _delay = 0;
    uint8_t _prescaler = 80;
    type_timer_interrupt_function_pointer _p_interrupt_function = NULL;
    uint8_t _timer_idx;
    bool _count_up = true;
    bool _rising_edge = true;
    bool _enable = true;
    bool _auto_reload = true;

    public:
    void setup(uint8_t timer_idx, type_timer_interrupt_function_pointer p_interrupt_function, bool autoreload)
    {
        _timer_idx = timer_idx;
        _p_interrupt_function = p_interrupt_function;
        _auto_reload = autoreload;

        _p_timer = timerBegin(timer_idx, _prescaler, _count_up);
        timerAttachInterrupt(_p_timer, p_interrupt_function, _rising_edge);
        timerSetAutoReload(_p_timer, _auto_reload);
    }

    void enable()
    {
        timerAlarmEnable(_p_timer);
    }

    void disable()
    {
        timerAlarmDisable(_p_timer);
    }

    void setDelay(uint32_t delay)
    {
        _delay = delay;
        timerAlarmWrite(_p_timer, _delay, _auto_reload);
    }

    void start()
    {
        timerStart(_p_timer);
    }

    void stop()
    {
        timerStop(_p_timer);
    }

    void restart()
    {
        timerRestart(_p_timer);
    }
};

class SoftwareTimer
{
    private:
    unsigned long _previous_time;
    unsigned long _current_time = 0;
    unsigned long _period = 0;
    bool _auto_reload = false;
    bool _timer_active = false;
    public:
    
    void setup(unsigned long period, bool auto_reload)
    {
        _period = period;
        _auto_reload = auto_reload;
    }
    void start()
    {
        _timer_active = true;
    }

    void stop()
    {
        _timer_active = false;
    }

    void setPeriod(unsigned long period)
    {
        _period = period;
    }

    void setAutoReload(bool auto_reload)
    {
        _auto_reload = auto_reload;
    }

    void reset()
    {
        _previous_time = micros();
    }

    bool periodElapsed()
    {
        _current_time = micros();
        if(_current_time - _previous_time >= _period)
        {
            _previous_time = _current_time;
            return true;
        }
        else return false;
    }
};

void printLoopFrequency()
{
    const uint16_t _time = 1000;
    unsigned long _current_time = millis();
    static unsigned long _previous_time = 0;
    static uint32_t _frequency = 0; 
    if(_current_time - _previous_time >= _time)
    {
        Serial.println("Loop frequency:" + String(_frequency));
        _frequency = 0;
        _previous_time = _current_time;
    }
    _frequency += 1;
}