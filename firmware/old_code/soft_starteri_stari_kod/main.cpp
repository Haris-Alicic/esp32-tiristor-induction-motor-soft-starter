#include <Arduino.h>

//Declarations
void zeroCross();
void setupTimer5();
void setTimerDelay(uint16_t delay_us);
void resetTimerCounter();
void setupTriacPin(const uint8_t &pin);
void setupInterruptPin(const int &pin, void(*pFuncton)());
uint16_t rmsToTimeDelay(uint16_t target_value);

//Classes
class CURRENT_SENSOR
{
  private:
  uint16_t current_;
  uint8_t sensor_pin_;
  uint8_t reset_pin_;
  
  public:
  CURRENT_SENSOR() {}
  CURRENT_SENSOR(const uint8_t &sensor_pin, const uint8_t &reset_pin): sensor_pin_(sensor_pin), reset_pin_(reset_pin) 
  {
    pinMode(reset_pin_, OUTPUT);
    digitalWrite(reset_pin_, LOW);
  }
  ~CURRENT_SENSOR() {}

  void setup(const uint8_t &sensor_pin, const uint8_t &reset_pin)
  {
    pinMode(reset_pin_, OUTPUT);
    digitalWrite(reset_pin_, LOW);
  }

  uint16_t measure()
  {
    current_ = analogRead(sensor_pin_);
    return current_;
  }

  void setCurrentSensor()
  {
    digitalWrite(reset_pin_, LOW);
  }

  void resetCurrentSensor()
  {
    digitalWrite(reset_pin_, HIGH);
  }

  uint16_t value()
  {
    return current_;
  }

};

class TIMER
{
  private:
  uint16_t delay_us_ = 0;
  public:
  TIMER() {};
  void setupTimer()
  {
    cli();  // Disable global interrupts

    TCCR5A = 0;  // Clear Timer/Counter Control Register A
    TCCR5B = (1 << WGM52) | (1 << CS51);  // Set CTC mode, prescaler = 8
    TIMSK5 = (1 << OCIE5A);  // Enable output compare A match interrupt
    TCNT5 = 0;  // Set initial count value to 0

    sei();  // Enable global interrupts
  }

  void setTimerDelay(uint16_t delay_us)
  {
    OCR5A = delay_us_ = delay_us;
  }

  void resetTimerCounter()
  {
  TCNT5 = 0;
  }
};

const uint8_t triac_pin = 2;
const uint8_t current_reset_pin = 3; //Treba postavit
const uint8_t interrupt_pin = 4;
const uint8_t current_sensor_pin = A0;

CURRENT_SENSOR Current;
TIMER Timer;

//Pid controller
float desired_rms = 512;
float current_rms = 0;
float error = 0;
float previous_error = 0;
float integral = 0;
float derivative = 0;
float output = 0;

float kp = 0.5;
float ki = 0.2;
float kd = 0.1;


/*************************************************************************************************************/
void setup()
{
setupInterruptPin(interrupt_pin, zeroCross);
setupTriacPin(triac_pin);
Current.setup(current_sensor_pin, current_reset_pin);
Timer.setupTimer();
}

/*************************************************************************************************************/
void loop()
{
  //PID controller
  desired_rms = analogRead(A1);
  current_rms = Current.value();
  error = desired_rms - current_rms;
  integral += error;
  derivative = error - previous_error;
  output = kp * error + ki * integral + kd * derivative;
  previous_error = error;
  output = constrain(output, 0, 1023);
  Timer.setTimerDelay(rmsToTimeDelay(output));
}

/*************************************************************************************************************/
//Inerrupts

void zeroCross()
{
  Current.measure();
  Current.resetCurrentSensor();
  Timer.resetTimerCounter();
  digitalWrite(triac_pin, LOW);
  Current.setCurrentSensor();
}

ISR(TIMER5_COMPA_vect)
{ 
    digitalWrite(triac_pin, HIGH);
}

//Functions
/*************************************************************************************************************/


void setupInterruptPin(const int &pin, void(*pFuncton)())
{
  pinMode(pin, INPUT);
  attachInterrupt(digitalPinToInterrupt(pin), pFuncton, RISING);
}

void setupTriacPin(const uint8_t &pin)
{
  pinMode(pin, OUTPUT);
  digitalWrite(pin, LOW);
}


uint16_t rmsToTimeDelay(uint16_t target_value)
{
  struct FunctionPair
  {
    uint16_t input;
    uint16_t output;
  };

  const FunctionPair Phase_Angle_To_Time_Delay[] =
    {
        {0, 1023},
        {1075, 1022},
        {1544, 1021},
        {1838, 1020},
        {2053, 1019},
        {2229, 1018},
        {2385, 1017},
        {2522, 1016},
        {2639, 1015},
        {2756, 1014},
        {2874, 1013},
        {2971, 1012},
        {3069, 1011},
        {3147, 1010},
        {3226, 1009},
        {3323, 1008},
        {3402, 1007},
        {3460, 1006},
        {3538, 1005},
        {3597, 1004},
        {3675, 1003},
        {3734, 1002},
        {3793, 1001},
        {3851, 1000},
        {3910, 999},
        {3969, 998},
        {4027, 997},
        {4086, 996},
        {4125, 995},
        {4184, 994},
        {4242, 993},
        {4281, 992},
        {4340, 991},
        {4379, 990},
        {4438, 989},
        {4477, 988},
        {4516, 987},
        {4555, 986},
        {4614, 985},
        {4653, 984},
        {4692, 983},
        {4731, 982},
        {4770, 981},
        {4809, 980},
        {4848, 979},
        {4887, 978},
        {4926, 977},
        {4966, 976},
        {5005, 975},
        {5044, 974},
        {5083, 973},
        {5122, 972},
        {5161, 971},
        {5181, 970},
        {5220, 969},
        {5259, 968},
        {5298, 967},
        {5317, 966},
        {5357, 965},
        {5396, 964},
        {5415, 963},
        {5454, 962},
        {5493, 961},
        {5513, 960},
        {5552, 959},
        {5591, 958},
        {5611, 957},
        {5650, 956},
        {5669, 955},
        {5708, 954},
        {5728, 953},
        {5767, 952},
        {5787, 951},
        {5826, 950},
        {5845, 949},
        {5884, 948},
        {5904, 947},
        {5943, 946},
        {5963, 945},
        {6002, 944},
        {6021, 943},
        {6041, 942},
        {6080, 941},
        {6099, 940},
        {6138, 939},
        {6158, 938},
        {6178, 937},
        {6217, 936},
        {6236, 935},
        {6256, 934},
        {6295, 933},
        {6314, 932},
        {6334, 931},
        {6354, 930},
        {6393, 929},
        {6412, 928},
        {6432, 927},
        {6471, 926},
        {6490, 925},
        {6510, 924},
        {6529, 923},
        {6569, 922},
        {6588, 921},
        {6608, 920},
        {6627, 919},
        {6647, 918},
        {6686, 917},
        {6705, 916},
        {6725, 915},
        {6745, 914},
        {6764, 913},
        {6784, 912},
        {6823, 911},
        {6842, 910},
        {6862, 909},
        {6881, 908},
        {6901, 907},
        {6920, 906},
        {6940, 905},
        {6979, 904},
        {6999, 903},
        {7018, 902},
        {7038, 901},
        {7057, 900},
        {7077, 899},
        {7096, 898},
        {7116, 897},
        {7136, 896},
        {7175, 895},
        {7194, 894},
        {7214, 893},
        {7233, 892},
        {7253, 891},
        {7272, 890},
        {7292, 889},
        {7311, 888},
        {7331, 887},
        {7351, 886},
        {7370, 885},
        {7390, 884},
        {7409, 883},
        {7429, 882},
        {7448, 881},
        {7468, 880},
        {7487, 879},
        {7507, 878},
        {7526, 877},
        {7546, 876},
        {7566, 875},
        {7585, 874},
        {7605, 873},
        {7624, 872},
        {7644, 871},
        {7663, 870},
        {7683, 869},
        {7702, 868},
        {7722, 867},
        {7742, 866},
        {7761, 865},
        {7781, 864},
        {7800, 863},
        {7820, 862},
        {7839, 861},
        {7859, 860},
        {7878, 859},
        {7898, 858},
        {7917, 856},
        {7937, 855},
        {7957, 854},
        {7976, 853},
        {7996, 852},
        {8015, 851},
        {8035, 850},
        {8054, 849},
        {8074, 848},
        {8093, 847},
        {8113, 846},
        {8133, 844},
        {8152, 843},
        {8172, 842},
        {8191, 841},
        {8211, 840},
        {8230, 839},
        {8250, 838},
        {8269, 837},
        {8289, 835},
        {8308, 834},
        {8328, 833},
        {8348, 832},
        {8367, 831},
        {8387, 830},
        {8406, 829},
        {8426, 827},
        {8445, 826},
        {8465, 825},
        {8484, 824},
        {8504, 823},
        {8524, 822},
        {8543, 820},
        {8563, 819},
        {8582, 818},
        {8602, 817},
        {8621, 816},
        {8641, 814},
        {8660, 813},
        {8680, 812},
        {8699, 811},
        {8719, 810},
        {8739, 808},
        {8758, 807},
        {8778, 806},
        {8797, 805},
        {8817, 804},
        {8836, 802},
        {8856, 801},
        {8875, 800},
        {8895, 799},
        {8915, 797},
        {8934, 796},
        {8954, 795},
        {8973, 794},
        {8993, 792},
        {9012, 791},
        {9032, 790},
        {9051, 789},
        {9071, 787},
        {9090, 786},
        {9110, 785},
        {9130, 783},
        {9149, 782},
        {9169, 781},
        {9188, 780},
        {9208, 778},
        {9227, 777},
        {9247, 776},
        {9266, 774},
        {9286, 773},
        {9306, 772},
        {9325, 770},
        {9345, 769},
        {9364, 768},
        {9384, 766},
        {9403, 765},
        {9423, 764},
        {9442, 763},
        {9462, 761},
        {9481, 760},
        {9501, 759},
        {9521, 757},
        {9540, 756},
        {9560, 754},
        {9579, 753},
        {9599, 752},
        {9618, 750},
        {9638, 749},
        {9657, 748},
        {9677, 746},
        {9697, 745},
        {9716, 744},
        {9736, 742},
        {9755, 741},
        {9775, 739},
        {9794, 738},
        {9814, 737},
        {9833, 735},
        {9853, 734},
        {9872, 733},
        {9892, 731},
        {9912, 730},
        {9931, 728},
        {9951, 727},
        {9970, 725},
        {9990, 724},
        {10009, 723},
        {10029, 721},
        {10048, 720},
        {10068, 718},
        {10087, 717},
        {10107, 716},
        {10127, 714},
        {10146, 713},
        {10166, 711},
        {10185, 710},
        {10205, 708},
        {10224, 707},
        {10244, 705},
        {10263, 704},
        {10283, 703},
        {10303, 701},
        {10322, 700},
        {10342, 698},
        {10361, 697},
        {10381, 695},
        {10400, 694},
        {10420, 692},
        {10439, 691},
        {10459, 689},
        {10478, 688},
        {10498, 686},
        {10518, 685},
        {10537, 683},
        {10557, 682},
        {10576, 680},
        {10596, 679},
        {10615, 678},
        {10635, 676},
        {10654, 675},
        {10674, 673},
        {10694, 672},
        {10713, 670},
        {10733, 668},
        {10752, 667},
        {10772, 665},
        {10791, 664},
        {10811, 662},
        {10830, 661},
        {10850, 659},
        {10869, 658},
        {10889, 656},
        {10909, 655},
        {10928, 653},
        {10948, 652},
        {10967, 650},
        {10987, 649},
        {11006, 647},
        {11026, 646},
        {11045, 644},
        {11065, 642},
        {11085, 641},
        {11104, 639},
        {11124, 638},
        {11143, 636},
        {11163, 635},
        {11182, 633},
        {11202, 632},
        {11221, 630},
        {11241, 628},
        {11260, 627},
        {11280, 625},
        {11300, 624},
        {11319, 622},
        {11339, 621},
        {11358, 619},
        {11378, 617},
        {11397, 616},
        {11417, 614},
        {11436, 613},
        {11456, 611},
        {11476, 610},
        {11495, 608},
        {11515, 606},
        {11534, 605},
        {11554, 603},
        {11573, 602},
        {11593, 600},
        {11612, 598},
        {11632, 597},
        {11651, 595},
        {11671, 594},
        {11691, 592},
        {11710, 590},
        {11730, 589},
        {11749, 587},
        {11769, 585},
        {11788, 584},
        {11808, 582},
        {11827, 581},
        {11847, 579},
        {11867, 577},
        {11886, 576},
        {11906, 574},
        {11925, 573},
        {11945, 571},
        {11964, 569},
        {11984, 568},
        {12003, 566},
        {12023, 564},
        {12042, 563},
        {12062, 561},
        {12082, 559},
        {12101, 558},
        {12121, 556},
        {12140, 555},
        {12160, 553},
        {12179, 551},
        {12199, 550},
        {12218, 548},
        {12238, 546},
        {12258, 545},
        {12277, 543},
        {12297, 541},
        {12316, 540},
        {12336, 538},
        {12355, 536},
        {12375, 535},
        {12394, 533},
        {12414, 531},
        {12433, 530},
        {12453, 528},
        {12473, 526},
        {12492, 525},
        {12512, 523},
        {12531, 521},
        {12551, 520},
        {12570, 518},
        {12590, 516},
        {12609, 515},
        {12629, 513},
        {12649, 511},
        {12668, 510},
        {12688, 508},
        {12707, 506},
        {12727, 505},
        {12746, 503},
        {12766, 501},
        {12785, 500},
        {12805, 498},
        {12824, 496},
        {12844, 495},
        {12864, 493},
        {12883, 491},
        {12903, 490},
        {12922, 488},
        {12942, 486},
        {12961, 484},
        {12981, 483},
        {13000, 481},
        {13020, 479},
        {13040, 478},
        {13059, 476},
        {13079, 474},
        {13098, 473},
        {13118, 471},
        {13137, 469},
        {13157, 468},
        {13176, 466},
        {13196, 464},
        {13215, 462},
        {13235, 461},
        {13255, 459},
        {13274, 457},
        {13294, 456},
        {13313, 454},
        {13333, 452},
        {13352, 451},
        {13372, 449},
        {13391, 447},
        {13411, 446},
        {13431, 444},
        {13450, 442},
        {13470, 440},
        {13489, 439},
        {13509, 437},
        {13528, 435},
        {13548, 434},
        {13567, 432},
        {13587, 430},
        {13606, 429},
        {13626, 427},
        {13646, 425},
        {13665, 423},
        {13685, 422},
        {13704, 420},
        {13724, 418},
        {13743, 417},
        {13763, 415},
        {13782, 413},
        {13802, 412},
        {13822, 410},
        {13841, 408},
        {13861, 406},
        {13880, 405},
        {13900, 403},
        {13919, 401},
        {13939, 400},
        {13958, 398},
        {13978, 396},
        {13997, 395},
        {14017, 393},
        {14037, 391},
        {14056, 389},
        {14076, 388},
        {14095, 386},
        {14115, 384},
        {14134, 383},
        {14154, 381},
        {14173, 379},
        {14193, 378},
        {14213, 376},
        {14232, 374},
        {14252, 373},
        {14271, 371},
        {14291, 369},
        {14310, 367},
        {14330, 366},
        {14349, 364},
        {14369, 362},
        {14388, 361},
        {14408, 359},
        {14428, 357},
        {14447, 356},
        {14467, 354},
        {14486, 352},
        {14506, 351},
        {14525, 349},
        {14545, 347},
        {14564, 346},
        {14584, 344},
        {14604, 342},
        {14623, 340},
        {14643, 339},
        {14662, 337},
        {14682, 335},
        {14701, 334},
        {14721, 332},
        {14740, 330},
        {14760, 329},
        {14779, 327},
        {14799, 325},
        {14819, 324},
        {14838, 322},
        {14858, 320},
        {14877, 319},
        {14897, 317},
        {14916, 315},
        {14936, 314},
        {14955, 312},
        {14975, 310},
        {14994, 309},
        {15014, 307},
        {15034, 305},
        {15053, 304},
        {15073, 302},
        {15092, 300},
        {15112, 299},
        {15131, 297},
        {15151, 296},
        {15170, 294},
        {15190, 292},
        {15210, 291},
        {15229, 289},
        {15249, 287},
        {15268, 286},
        {15288, 284},
        {15307, 282},
        {15327, 281},
        {15346, 279},
        {15366, 277},
        {15385, 276},
        {15405, 274},
        {15425, 273},
        {15444, 271},
        {15464, 269},
        {15483, 268},
        {15503, 266},
        {15522, 264},
        {15542, 263},
        {15561, 261},
        {15581, 260},
        {15601, 258},
        {15620, 256},
        {15640, 255},
        {15659, 253},
        {15679, 252},
        {15698, 250},
        {15718, 248},
        {15737, 247},
        {15757, 245},
        {15776, 244},
        {15796, 242},
        {15816, 240},
        {15835, 239},
        {15855, 237},
        {15874, 236},
        {15894, 234},
        {15913, 233},
        {15933, 231},
        {15952, 229},
        {15972, 228},
        {15992, 226},
        {16011, 225},
        {16031, 223},
        {16050, 222},
        {16070, 220},
        {16089, 218},
        {16109, 217},
        {16128, 215},
        {16148, 214},
        {16167, 212},
        {16187, 211},
        {16207, 209},
        {16226, 208},
        {16246, 206},
        {16265, 205},
        {16285, 203},
        {16304, 201},
        {16324, 200},
        {16343, 198},
        {16363, 197},
        {16383, 195},
        {16402, 194},
        {16422, 192},
        {16441, 191},
        {16461, 189},
        {16480, 188},
        {16500, 186},
        {16519, 185},
        {16539, 183},
        {16558, 182},
        {16578, 180},
        {16598, 179},
        {16617, 177},
        {16637, 176},
        {16656, 174},
        {16676, 173},
        {16695, 171},
        {16715, 170},
        {16734, 169},
        {16754, 167},
        {16774, 166},
        {16793, 164},
        {16813, 163},
        {16832, 161},
        {16852, 160},
        {16871, 158},
        {16891, 157},
        {16910, 156},
        {16930, 154},
        {16949, 153},
        {16969, 151},
        {16989, 150},
        {17008, 148},
        {17028, 147},
        {17047, 146},
        {17067, 144},
        {17086, 143},
        {17106, 141},
        {17125, 140},
        {17145, 139},
        {17164, 137},
        {17184, 136},
        {17204, 135},
        {17223, 133},
        {17243, 132},
        {17262, 130},
        {17282, 129},
        {17301, 128},
        {17321, 126},
        {17340, 125},
        {17360, 124},
        {17380, 122},
        {17399, 121},
        {17419, 120},
        {17438, 118},
        {17458, 117},
        {17477, 116},
        {17497, 114},
        {17516, 113},
        {17536, 112},
        {17555, 110},
        {17575, 109},
        {17595, 108},
        {17614, 107},
        {17634, 105},
        {17653, 104},
        {17673, 103},
        {17692, 101},
        {17712, 100},
        {17731, 99},
        {17751, 98},
        {17771, 96},
        {17790, 95},
        {17810, 94},
        {17829, 93},
        {17849, 91},
        {17868, 90},
        {17888, 89},
        {17907, 88},
        {17927, 87},
        {17946, 85},
        {17966, 84},
        {17986, 83},
        {18005, 82},
        {18025, 81},
        {18044, 79},
        {18064, 78},
        {18083, 77},
        {18103, 76},
        {18122, 75},
        {18142, 74},
        {18161, 72},
        {18181, 71},
        {18201, 70},
        {18220, 69},
        {18240, 68},
        {18259, 67},
        {18279, 66},
        {18298, 65},
        {18318, 64},
        {18337, 62},
        {18357, 61},
        {18377, 60},
        {18396, 59},
        {18416, 58},
        {18435, 57},
        {18455, 56},
        {18474, 55},
        {18494, 54},
        {18513, 53},
        {18533, 52},
        {18552, 51},
        {18572, 50},
        {18592, 49},
        {18611, 48},
        {18631, 47},
        {18650, 46},
        {18670, 45},
        {18689, 44},
        {18709, 43},
        {18728, 42},
        {18748, 41},
        {18767, 40},
        {18787, 39},
        {18807, 38},
        {18826, 37},
        {18846, 36},
        {18865, 35},
        {18885, 34},
        {18924, 33},
        {18943, 32},
        {18963, 31},
        {18983, 30},
        {19002, 29},
        {19022, 28},
        {19041, 27},
        {19080, 26},
        {19100, 25},
        {19119, 24},
        {19139, 23},
        {19178, 22},
        {19198, 21},
        {19217, 20},
        {19256, 19},
        {19276, 18},
        {19295, 17},
        {19334, 16},
        {19354, 15},
        {19393, 14},
        {19413, 13},
        {19452, 12},
        {19471, 11},
        {19510, 10},
        {19530, 9},
        {19569, 8},
        {19608, 7},
        {19647, 6},
        {19686, 5},
        {19725, 4},
        {19764, 3},
        {19823, 2},
        {19862, 1},
        {19940, 0},
    };

    static const uint16_t array_size = sizeof(Phase_Angle_To_Time_Delay) / sizeof(Phase_Angle_To_Time_Delay[0]);

    int32_t prev_difference = 0, curr_difference = 0;
    uint16_t index;

    for(uint16_t counter = 0; counter < array_size; counter++)
    {
        if(counter == 0)
        {
            prev_difference = 0.0;
            curr_difference = abs(Phase_Angle_To_Time_Delay[counter].output - target_value);
        }
        else
        {
            prev_difference = abs(Phase_Angle_To_Time_Delay[counter - 1].output - target_value);
            curr_difference = abs(Phase_Angle_To_Time_Delay[counter].output - target_value);
        }
        if(curr_difference <= prev_difference) index = counter;
        
    }
    return Phase_Angle_To_Time_Delay[index].input;

}