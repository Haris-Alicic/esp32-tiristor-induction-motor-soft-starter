/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <algorithm>

using namespace std;

// Function to perform binary search on a float array
int binarySearch(float (&arr)[101][2], int size, float x) {
    int left = 0;
    int right = size - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;

        // Check if x is present at mid
        if (arr[mid][1] == x)
            return mid;

        // If x is greater, ignore left half
        if (arr[mid][1] < x)
            left = mid + 1;

        // If x is smaller, ignore right half
        else
            right = mid - 1;
    }

    // if we reach here, then element was not present
    return -1;
}

int main() {
    float arr[101][2] =
    {
    {0.00000000000,1.000000000},
    {0.00999999978,0.999996715},
    {0.0199999996 ,0.999973711},
    {0.0299999993 ,0.999911341},
    {0.0399999991 ,0.999790079},
    {0.0500000007 ,0.999590702},
    {0.0600000024 ,0.999294172},
    {0.0700000003 ,0.998881818},
    {0.0799999982 ,0.998335361},
    {0.0899999961 ,0.997636961},
    {0.099999994  ,0.996769231},
    {0.109999992  ,0.9957154},
    {0.11999999   ,0.994459171},
    {0.129999995  ,0.992984875},
    {0.140000001  ,0.991277462},
    {0.150000006  ,0.989322536},
    {0.160000011  ,0.987106348},
    {0.170000017  ,0.984615931},
    {0.180000022  ,0.981838938},
    {0.190000027  ,0.978763749},
    {0.200000033  ,0.975379571},
    {0.210000038  ,0.971676268},
    {0.220000044  ,0.967644486},
    {0.230000049  ,0.963275633},
    {0.240000054  ,0.958561851},
    {0.25000006   ,0.953496137},
    {0.26000005   ,0.948072167},
    {0.270000041  ,0.942284412},
    {0.280000031  ,0.936128108},
    {0.290000021  ,0.929599253},
    {0.300000012  ,0.922694603},
    {0.310000002  ,0.915411667},
    {0.319999993  ,0.907748703},
    {0.329999983  ,0.89970471},
    {0.339999974  ,0.891279419},
    {0.349999964  ,0.882473292},
    {0.359999955  ,0.873287504},
    {0.369999945  ,0.863723945},
    {0.379999936  ,0.8537852},
    {0.389999926  ,0.843474546},
    {0.399999917  ,0.832795941},
    {0.409999907  ,0.821754011},
    {0.419999897  ,0.81035404},
    {0.429999888  ,0.798601961},
    {0.439999878  ,0.78650434},
    {0.449999869  ,0.774068368},
    {0.459999859  ,0.761301847},
    {0.46999985   ,0.748213178},
    {0.47999984   ,0.734811351},
    {0.489999831  ,0.721105928},
    {0.499999821  ,0.707107034},
    {0.509999812  ,0.692825342},
    {0.519999802  ,0.678272062},
    {0.529999793  ,0.663458928},
    {0.539999783  ,0.648398182},
    {0.549999774  ,0.633102567},
    {0.559999764  ,0.617585308},
    {0.569999754  ,0.601860107},
    {0.579999745  ,0.585941123},
    {0.589999735  ,0.569842965},
    {0.599999726  ,0.553580679},
    {0.609999716  ,0.537169734},
    {0.619999707  ,0.520626019},
    {0.629999697  ,0.503965822},
    {0.639999688  ,0.487205829},
    {0.649999678  ,0.470363112},
    {0.659999669  ,0.45345512},
    {0.669999659  ,0.436499674},
    {0.67999965   ,0.41951496},
    {0.68999964   ,0.402519526},
    {0.69999963   ,0.385532279},
    {0.709999621  ,0.368572483},
    {0.719999611  ,0.351659764},
    {0.729999602  ,0.334814111},
    {0.739999592  ,0.318055885},
    {0.749999583  ,0.30140583},
    {0.759999573  ,0.284885087},
    {0.769999564  ,0.268515219},
    {0.779999554  ,0.252318233},
    {0.789999545  ,0.236316619},
    {0.799999535  ,0.220533389},
    {0.809999526  ,0.204992137},
    {0.819999516  ,0.189717105},
    {0.829999506  ,0.174733271},
    {0.839999497  ,0.160066457},
    {0.849999487  ,0.145743465},
    {0.859999478  ,0.131792253},
    {0.869999468  ,0.118242155},
    {0.879999459  ,0.105124169},
    {0.889999449  ,0.092471333},
    {0.89999944   ,0.080319229},
    {0.90999943   ,0.068706663},
    {0.919999421  ,0.057676625},
    {0.929999411  ,0.047277659},
    {0.939999402  ,0.037565939},
    {0.949999392  ,0.028608523},
    {0.959999382  ,0.020488888},
    {0.969999373  ,0.013317231},
    {0.979999363  ,0.007252679},
    {0.989999354  ,0.002565095},
    {0.999999344  ,0.0}
    };
    int n = sizeof(arr) / sizeof(arr[0]);
    float x = 6.7;

    // Sort the array before performing binary search
    sort(arr, arr + n);

    // Perform binary search on the array
    int result = binarySearch(arr, n, x);

    // Check if element was found or not
    if (result == -1)
        cout << "Element not found\n";
    else
        cout << "Element found at index " << result << "\n";

    return 0;
}